#!/usr/bin/env python
"""get-mongodb-binaries gets a set of compiled binaries

"""
import os
import sys
import tempfile

import argparse

from mongodb_binaries import BinariesCriteria, BinariesManager


def do_download(args):
    requested_binaries = BinariesCriteria(os_type=args.os_type,
                                          branch=args.branch,
                                          version=args.revision,
                                          cpu_arch=args.cpu_arch,
                                          debug=args.debug,
                                          project=args.project,
                                          git_hash=args.git_hash,
                                          variant=args.variant,
                                          tasks=args.tasks)

    binaries_manager = BinariesManager(directory=args.download_dir)
    binaries_manager.update(criteria=requested_binaries)
    return binaries_manager


def export_download_info(binaries_manager):
    """

    :type binaries_manager: BinariesManager
    :return:
    """
    print ("export MMSA_BINARIES_DOWNLOAD_LINK=%s"
           % binaries_manager.current_download.link)

    print ("export MMSA_BINARIES_OS=%s"
           % binaries_manager.requested_criteria.os_type)

    if binaries_manager.requested_criteria.cpu_arch is "x86_64":
        bits = 64
    else:
        bits = 32
    print ("export MMSA_BINARIES_BITS=%s" % bits)

def main():
    # Main Section

    # setup command line arguments
    parser = argparse.ArgumentParser(description='Download MongoDB binaries')

    parser.add_argument('--dir', dest='download_dir', action='store',
                        required=True,
                        help='the directory to download the binaries file to')
    parser.add_argument('--branch', dest='branch', action='store',
                        default=None,
                        help='the branch to get the latest build for eg v2.6')
    parser.add_argument('--revision', dest='revision', action='store',
                        default=None,
                        help='the version to get the binaries for')
    parser.add_argument('--distribution', dest='distribution', action='store',
                        default=None,
                        help='the distribution to get the binaries for')
    parser.add_argument('--os', dest='os_type', action='store',
                        help='override the os to grab the binaries for '
                             '(linux, osx, win32, sunos5)',
                        default=None)
    parser.add_argument('--cpu', dest='cpu_arch', action='store',
                        help='grabs the CPU architecture (defaults to x86_64 '
                             'can be i686',
                        default="x86_64")
    parser.add_argument('--debug', action='store_true',
                        help='if true grab the debugsymbols version of the '
                             'binaries')
    parser.add_argument('--project', action='store', dest='project',
                        default=None,
                        help='the MCI project to get the mongodb binaries for')
    parser.add_argument('--variant', action='store', dest='variant',
                        default=None,
                        help='the MCI variant to get the binaries for')
    parser.add_argument('--githash', action='store', dest='git_hash',
                        default=None,
                        help='the Git hash for the MCI build to get the '
                             'binaries for')
    parser.add_argument('--tasks', nargs='+', dest='tasks', default=[],
                        help='the MCI tasks that have been successfully '
                             'completed',)

    args = parser.parse_args()

    # set the temporary path to the same directory the binaries directory
    # are being deployed to
    tempfile.tempdir = os.path.dirname(os.path.realpath(args.download_dir))

    export_download_info(do_download(args))


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        sys.stderr.write(e)
        sys.exit(1)
    sys.exit(0)
