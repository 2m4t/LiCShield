# specjvm.additional.properties.file=
# Load property values from this file as well, if it is found.
# The expected use of this additional file is for setting report info about the system under test.

# specjvm.benchmarks=startup.helloworld startup.compiler.compiler startup.compiler.sunflow startup.compress startup.crypto.aes startup.crypto.rsa startup.crypto.signverify startup.mpegaudio startup.scimark.fft startup.scimark.lu startup.scimark.monte_carlo startup.scimark.sor startup.scimark.sparse startup.serial startup.sunflow startup.xml.transform startup.xml.validation compiler.compiler compiler.sunflow compress crypto.aes crypto.rsa crypto.signverify derby mpegaudio scimark.fft.large scimark.lu.large scimark.sor.large scimark.sparse.large scimark.fft.small scimark.lu.small scimark.sor.small scimark.sparse.small scimark.monte_carlo serial sunflow xml.transform xml.validation
# Which benchmarks to run
# Valid values: Any subset of SPECjvm2008 workload names
# Default value: The list given above
# Permitted for compliant run: <default value>
# Permitted for Lagom run: <default value>

# specjvm.benchmarks.derby.debug=*
# Whether to set DEBUG flag for the derby benchmark
# Valid values: true, false
# Default value: false
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.io.validation.debug=*
# Whether to set the DEBUG flag for validation
# Valid values: true, false
# Default value: false
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.benchmarks.startup.debug=
# Whether to set the DEBUG flag for the startup benchmarks
# Valid values: true, false
# Default value: false
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.benchmark.analyzer.frequency=
# Interval at which analyzers are run during workload execution
# Valid values: <time spec>
# Default value: 1s
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.benchmark.analyzer.names=""*
# Name of the analyzers to run during tests.
# Valid values: Names of classes in package spec.harness.analyzer
# Default value: false
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>
# Analyzers included:
#   HeapMemoryFreeAnalyzer HeapMemoryTotalAnalyzer 
#   TempAnalyzer PowerAnalyzer
#   PollingAnalyzerExample CallbackAnalyzerExample
# specjvm.benchmark.analyzer.names=HeapMemoryFreeAnalyzer HeapMemoryTotalAnalyzer

# spec.harness.analyzer.PowerAnalyzer.host=<host name>
# Which host the PowerAnalyzer should connect to for the SPEC PTDaemon
# Default is 127.0.0.1

# spec.harness.analyzer.PowerAnalyzer.port=<port>
# Which port the PowerAnalyzer should connect to for the SPEC PTDaemon
# Default is 8888

# spec.harness.analyzer.TempAnalyzer.host=<host name>
# Which host the PowerAnalyzer should connect to for the SPEC PTDaemon
# Default is 127.0.0.1

# spec.harness.analyzer.TempAnalyzer.port=<port>
# Which port the PowerAnalyzer should connect to for the SPEC PTDaemon
# Default is 8889

# specjvm.benchmark.delay=0s<5,0s<5
# Specify how long pause there should be before each benchmark.
# Valid values: <time spec>
# Default value: 0s
# Permitted for compliant run: less than 5s
# Permitted for Lagom run: less than 5s

# specjvm.benchmark.startup.launcher=,
# Command line to start a new JVM used by the startup benchmarks
# Valid values: valid command line
# Default value:
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.benchmark.startup.scimark.all=!
# Valid values: true, false
# Default value: false
# Permitted for compliant run: <none>
# Permitted for Lagom run: <none>

# specjvm.benchmark.startup.crypto.all=!
# Valid values: true, false
# Default value: false
# Permitted for compliant run: <none>
# Permitted for Lagom run: <none>

# specjvm.benchmark.sunflow.threads.per.instance=4=
# Number of threads to use for each instance of the sunflow benchmark (which is inherently multithreaded).
# Valid values: Positive integer
# Default value: 4
# Permitted for compliant run: 4
# Permitted for Lagom run: 4

# specjvm.benchmark.systemgc=!
# Specify if a GC should be forced before each benchmark.
# Valid values: true, false
# Default value: false
# Permitted for compliant run: false
# Permitted for Lagom run: false

# specjvm.benchmark.threads=#hwt*
# specjvm.benchmark.threads.check=1=
# specjvm.benchmark.threads.startup=#hwt
# specjvm.benchmark.threads.compress=#hwt
# specjvm.benchmark.threads.compiler.compiler=#hwt
# specjvm.benchmark.threads.compiler.hello=#hwt
# specjvm.benchmark.threads.compiler.sunflow=0.5x#hwt*
# specjvm.benchmark.threads.crypto.aes=#hwt
# specjvm.benchmark.threads.crypto.hash=#hwt
# specjvm.benchmark.threads.crypto.rsa=#hwt
# specjvm.benchmark.threads.crypto.signverify=#hwt
# specjvm.benchmark.threads.derby=#hwt
# specjvm.benchmark.threads.mpegaudio=#hwt
# specjvm.benchmark.threads.scimark.fft=#hwt
# specjvm.benchmark.threads.scimark.lu=#hwt
# specjvm.benchmark.threads.scimark.monte_carlo=#hwt
# specjvm.benchmark.threads.scimark.sor=#hwt
# specjvm.benchmark.threads.scimark.sparse=#hwt
# specjvm.benchmark.threads.serial=#hwt
# specjvm.benchmark.threads.xml.transform=#hwt
# specjvm.benchmark.threads.xml.validation=#hwt
# Benchmarks number of threads
# Valid values: #hwt, positive integer
# Default value: <as shown above>
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.benchmark.warmup.time=120s
# Specify how long warmup time is requested.
# Valid values: <time spec>
# Default value: 120s
# Permitted for compliant run: 120s
# Permitted for compliant run: <any>
# Permitted for Lagom run: 0s

# specjvm.benchmark.xml.transform.leave.out.dir=!
# Valid values: true, false
# Default value: false
# Permitted for compliant run: <none>
# Permitted for Lagom run: <none>

# specjvm.benchmark.xml.transform.out.dir=!
# Valid values: <directory name>
# Default value: ???
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.benchmark.xml.validation.input.dir=none
# May be set to resources/xml.validation to workaround a JDK1.5 bug on Linux
# Valid values: <diretory name>
# Default value: specbasedir/resources/xml.validation 
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.create.html.report=true*
# Specifies if a HTML report will be created.
# Valid values: true, false
# Default value: true
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.create.txt.report=true*
# Specifies if a text report will be created.
# Valid values: true, false
# Default value: true
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.create.xml.report=true
# Specifies if an XML report will be created.
# Valid values: true, false
# Default value: true
# Permitted for compliant run: true
# Permitted for Lagom run: true

# specjvm.generateValidityCheckFiles=false
# Set to true if you want the validity check file generated.
# Only interesting if you develop new workloads; in-depth
#   understanding of SPECjvm2008 code is required.
# Valid values: true, false
# Default value: false
# Permitted for compliant run: false
# Permitted for Lagom run: false

# specjvm.hardware.threads.override=*,!
# Property that overrides setting for number of hardware threads machine has
# This can not be used in compliant run ????
# Valid values: positive integer
# Default value: actual number of HW threads available to the JVM
# Permitted for compliant run: <any> ???
# Permitted for Lagom run: <none> ???

# specjvm.home.dir=.*
# The root directory where the SPECjvm2008 kit is installed.
# Setting this on the command line has no effect.
# Valid values:
# Default value:
# Permitted for compliant run:
# Permitted for Lagom run:

# specjvm.iteration.delay=0s<5,0s<5
# Specify how long pause there should be between each iteration
# Valid values: <time spec>
# Default value: 0s
# Permitted for compliant run: less than 5s
# Permitted for Lagom run: less than 5s

# specjvm.iteration.time=240s
# Duration for each benchmark run (one iteration)
# Valid values: <time spec>
# Default value: 120s
# Permitted for compliant base run: 240s
# Permitted for compliant peak run: >= 240s
# Permitted for Lagom run: 0s

# specjvm.iteration.time.forced=!,!
# Whether the duration for each iteration is forced
# Valid values: true, false
# Default value: false
# Permitted for compliant run: false
# Permitted for Lagom run: false

# specjvm.iteration.systemgc=false=,false=
# Specify if a GC should be forced between each iteration.
# Valid values: true, false
# Default value: false
# Permitted for compliant run: false
# Permitted for Lagom run: false

# specjvm.fixed.operations=!,-1*
# specjvm.fixed.operations.compiler.compiler=!,20=
# specjvm.fixed.operations.compiler.sunflow=!,20=
# specjvm.fixed.operations.compress=!,50=
# specjvm.fixed.operations.crypto.aes=!,20=
# specjvm.fixed.operations.crypto.rsa=!,150=
# specjvm.fixed.operations.crypto.signverify=!,125=
# specjvm.fixed.operations.derby=!,30=
# specjvm.fixed.operations.mpegaudio=!,50=
# specjvm.fixed.operations.scimark.fft.large=!,10=
# specjvm.fixed.operations.scimark.fft.small=!,100=
# specjvm.fixed.operations.scimark.lu.large=!,4=,
# specjvm.fixed.operations.scimark.lu.small=!,125=
# specjvm.fixed.operations.scimark.monte_carlo=!,900=
# specjvm.fixed.operations.scimark.sor.large=!,15=
# specjvm.fixed.operations.scimark.sor.small=!,75=
# specjvm.fixed.operations.scimark.sparse.large=!,10=
# specjvm.fixed.operations.scimark.sparse.small=!,25=
# specjvm.fixed.operations.serial=!,25=
# specjvm.fixed.operations.sunflow=!,30=
# specjvm.fixed.operations.xml.transform=!,7=
# specjvm.fixed.operations.xml.validation=!,40=
# The fixed number of operations to run
# Used only for Lagom runs
# Valid values: positive integer
# Default value: <as shown above>
# Permitted for compliant run: <none>
# Recommended for Lagom run: <default>

# specjvm.maxiter=1*,1*
# specjvm.maxiter.check=1*,1*
# Specifies how many iterations at most is run in auto mode
# Valid values: positive integer
# Default value: 1
# Permitted for compliant run: 1
# Permitted for Lagom run: 1

# specjvm.miniter=1*,1*
# specjvm.miniter.check=1*,1*
# Specifies how many iterations at least is run in auto mode
# Valid values: positive integer
# Default value: 1
# Permitted for compliant run: 1
# Permitted for Lagom run: 1

# specjvm.print.verbose=false*
# Whether the harness should print extra info
# Valid values: true, false
# Default value: false
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.print.progress=false*
# Whether to print a dot after each loop, to view progress.
# Valid values: true, false
# Default value: false
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.propfile=*,!
# Valid values: <filename>
# Default value: <none>
# Permitted for compliant run: <any>
# Permitted for Lagom run: <none> ????

# specjvm.result.dir=./results*
# Valid values: <directory name>
# Default value: ./results
# Permitted for compliant run: <any>
# Permitted for Lagom run: <any>

# specjvm.run.initial.check=true=
# Specify if the run check should be done
# Valid values: true, false
# Default value: true
# Permitted for compliant run: true
# Permitted for Lagom run: true

# specjvm.scimark.size=DEFAULT=
# The problem size for the scimark benchmarks
# Only has an effect if the benchmarks are run in "simple" mode
# Valid values:
# Default value:
# Permitted for compliant run:
# Permitted for Lagom run:

# specjvm.spin.at.end=false=
# Set this to force the launcher to spin with sleeps in the end.
# Useful when looking for memory leaks in the applications and JVM.
# Valid values: true, false
# Default value: false
# Permitted for compliant run: false
# Permitted for Lagom run: false

# specjvm.startup.jvm_options=*,*
# Startup benchmark JVM Options
# Valid values: <list of JVM options>
# Default value: <none>
# Permitted for compliant base run: <none> 
# Permitted for compliant peak run: <any> 
# Permitted for Lagom run: <any>

# specjvm.validity.checksum=true=
# Specifies whether checksums on benchmark jar files will be tested
# Valid values: true, false
# Default value: true
# Permitted for compliant run: true
# Permitted for Lagom run: true

# specjvm.verify=true=
# Property that says if output is verified.
# Set to false and output will be printed on stdout.
# Valid values: true, false
# Default value: true
# Permitted for compliant run: true
# Permitted for Lagom run: true
